// Code generated by protoc-gen-go. DO NOT EDIT.
// source: streamfile.proto

/*
Package streamfile is a generated protocol buffer package.

It is generated from these files:
	streamfile.proto
	event.proto

It has these top-level messages:
	Metadata
	Device
	Event
	PixelPusherPixels
*/
package streamfile

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Compression is a supported compression mode.
type Compression int32

const (
	Compression_SNAPPY Compression = 0
	Compression_NONE   Compression = 1
	Compression_GZIP   Compression = 2
)

var Compression_name = map[int32]string{
	0: "SNAPPY",
	1: "NONE",
	2: "GZIP",
}
var Compression_value = map[string]int32{
	"SNAPPY": 0,
	"NONE":   1,
	"GZIP":   2,
}

func (x Compression) String() string {
	return proto.EnumName(Compression_name, int32(x))
}
func (Compression) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Version is the version of this file format.
type Metadata_Version int32

const (
	// UNKNOWN is an unknown version. It is the enum's default value to catch
	// uninitialized enums.
	Metadata_UNKNOWN Metadata_Version = 0
	// V_1 is the first (and only) version of this file.
	Metadata_V_1 Metadata_Version = 1
)

var Metadata_Version_name = map[int32]string{
	0: "UNKNOWN",
	1: "V_1",
}
var Metadata_Version_value = map[string]int32{
	"UNKNOWN": 0,
	"V_1":     1,
}

func (x Metadata_Version) String() string {
	return proto.EnumName(Metadata_Version_name, int32(x))
}
func (Metadata_Version) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// PixelType is the type of pixel that this strip uses.
type Device_Strip_PixelType int32

const (
	Device_Strip_RGB   Device_Strip_PixelType = 0
	Device_Strip_RGBOW Device_Strip_PixelType = 1
)

var Device_Strip_PixelType_name = map[int32]string{
	0: "RGB",
	1: "RGBOW",
}
var Device_Strip_PixelType_value = map[string]int32{
	"RGB":   0,
	"RGBOW": 1,
}

func (x Device_Strip_PixelType) String() string {
	return proto.EnumName(Device_Strip_PixelType_name, int32(x))
}
func (Device_Strip_PixelType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0, 0} }

// Metadata is file-level metadata.
type Metadata struct {
	Version Metadata_Version `protobuf:"varint,1,opt,name=version,enum=streamfile.Metadata_Version" json:"version,omitempty"`
	// Minor is the minor version of this file. It is enumerated within Version,
	// and is used for migration purposes.
	Minor uint32 `protobuf:"varint,11,opt,name=minor" json:"minor,omitempty"`
	// Name is the name of this file.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// DEPRECATED, use "event_file_info" instead!
	//
	// The relative paths of event files that compose this stream.
	//
	// TODO: Remove this once all files referencing it have been remedied.
	EventFile     []string              `protobuf:"bytes,3,rep,name=event_file,json=eventFile" json:"event_file,omitempty"`
	EventFileInfo []*Metadata_EventFile `protobuf:"bytes,10,rep,name=event_file_info,json=eventFileInfo" json:"event_file_info,omitempty"`
	// Created is the time when this file was created.
	Created *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=created" json:"created,omitempty"`
	// Duration is the total duration of the event stream.
	Duration *google_protobuf.Duration `protobuf:"bytes,5,opt,name=duration" json:"duration,omitempty"`
	// Total number of individual events in the stream.
	NumEvents int64 `protobuf:"varint,6,opt,name=num_events,json=numEvents" json:"num_events,omitempty"`
	// Duration is the total duration of the event stream.
	NumBytes int64 `protobuf:"varint,7,opt,name=num_bytes,json=numBytes" json:"num_bytes,omitempty"`
	// DEPRECATED, in favor of per-file devices.
	//
	// If populated, the first EventFile will use this device list; otherwise
	// each individual EventFile will have its own devices list.
	//
	// TODO: Remove this once all files referencing it have been remedied.
	Devices []*Device `protobuf:"bytes,8,rep,name=devices" json:"devices,omitempty"`
	// DEPRECATED, in favor of per-file compression setting.
	//
	// If populated, the first EventFile will use this device list; otherwise
	// each individual EventFile will have its own devices list.
	//
	// TODO: Remove this once all files referencing it have been remedied.
	Compression Compression `protobuf:"varint,9,opt,name=compression,enum=streamfile.Compression" json:"compression,omitempty"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Metadata) GetVersion() Metadata_Version {
	if m != nil {
		return m.Version
	}
	return Metadata_UNKNOWN
}

func (m *Metadata) GetMinor() uint32 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *Metadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Metadata) GetEventFile() []string {
	if m != nil {
		return m.EventFile
	}
	return nil
}

func (m *Metadata) GetEventFileInfo() []*Metadata_EventFile {
	if m != nil {
		return m.EventFileInfo
	}
	return nil
}

func (m *Metadata) GetCreated() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Metadata) GetDuration() *google_protobuf.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *Metadata) GetNumEvents() int64 {
	if m != nil {
		return m.NumEvents
	}
	return 0
}

func (m *Metadata) GetNumBytes() int64 {
	if m != nil {
		return m.NumBytes
	}
	return 0
}

func (m *Metadata) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *Metadata) GetCompression() Compression {
	if m != nil {
		return m.Compression
	}
	return Compression_SNAPPY
}

// Composite event files.
type Metadata_EventFile struct {
	// name is the relative filename of this event file.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Compression is the compression used for this event file.
	Compression Compression `protobuf:"varint,2,opt,name=compression,enum=streamfile.Compression" json:"compression,omitempty"`
	// A list of device indices in the event file.
	//
	// The event file uses internal indices to reference devices. Its internal
	// indices begin at 0, and map to devices in the Devices list.
	//
	// This is a list of those mappings, where the list index (0...n) is the
	// internal ID of that device and the list value is the index in the
	// Devices list.
	DeviceMapping []int64 `protobuf:"varint,3,rep,packed,name=device_mapping,json=deviceMapping" json:"device_mapping,omitempty"`
	// Duration is the total duration of the event stream.
	Duration *google_protobuf.Duration `protobuf:"bytes,4,opt,name=duration" json:"duration,omitempty"`
	// Total number of individual events in the file.
	NumEvents int64 `protobuf:"varint,5,opt,name=num_events,json=numEvents" json:"num_events,omitempty"`
	// Total number of bytes in the file.
	NumBytes int64 `protobuf:"varint,6,opt,name=num_bytes,json=numBytes" json:"num_bytes,omitempty"`
}

func (m *Metadata_EventFile) Reset()                    { *m = Metadata_EventFile{} }
func (m *Metadata_EventFile) String() string            { return proto.CompactTextString(m) }
func (*Metadata_EventFile) ProtoMessage()               {}
func (*Metadata_EventFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Metadata_EventFile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Metadata_EventFile) GetCompression() Compression {
	if m != nil {
		return m.Compression
	}
	return Compression_SNAPPY
}

func (m *Metadata_EventFile) GetDeviceMapping() []int64 {
	if m != nil {
		return m.DeviceMapping
	}
	return nil
}

func (m *Metadata_EventFile) GetDuration() *google_protobuf.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *Metadata_EventFile) GetNumEvents() int64 {
	if m != nil {
		return m.NumEvents
	}
	return 0
}

func (m *Metadata_EventFile) GetNumBytes() int64 {
	if m != nil {
		return m.NumBytes
	}
	return 0
}

// Device is information about a device referenced in the event stream.
type Device struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The number of pixels per strip.
	PixelsPerStrip int64           `protobuf:"varint,2,opt,name=pixels_per_strip,json=pixelsPerStrip" json:"pixels_per_strip,omitempty"`
	Strip          []*Device_Strip `protobuf:"bytes,3,rep,name=strip" json:"strip,omitempty"`
	// Ordinal is the ordinal for this device. Is ordinal is empty, the device
	// does not have one (invalid).
	Ordinal *Device_Ordinal `protobuf:"bytes,4,opt,name=ordinal" json:"ordinal,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Device) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Device) GetPixelsPerStrip() int64 {
	if m != nil {
		return m.PixelsPerStrip
	}
	return 0
}

func (m *Device) GetStrip() []*Device_Strip {
	if m != nil {
		return m.Strip
	}
	return nil
}

func (m *Device) GetOrdinal() *Device_Ordinal {
	if m != nil {
		return m.Ordinal
	}
	return nil
}

// Strip represents an LED strip in this Device.
type Device_Strip struct {
	// IsRgbow is true if this strip uses RGBOW
	PixelType Device_Strip_PixelType `protobuf:"varint,1,opt,name=pixel_type,json=pixelType,enum=streamfile.Device_Strip_PixelType" json:"pixel_type,omitempty"`
}

func (m *Device_Strip) Reset()                    { *m = Device_Strip{} }
func (m *Device_Strip) String() string            { return proto.CompactTextString(m) }
func (*Device_Strip) ProtoMessage()               {}
func (*Device_Strip) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Device_Strip) GetPixelType() Device_Strip_PixelType {
	if m != nil {
		return m.PixelType
	}
	return Device_Strip_RGB
}

type Device_Ordinal struct {
	// The device's group number.
	Group int32 `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	// The device's controller number.
	Controller int32 `protobuf:"varint,2,opt,name=controller" json:"controller,omitempty"`
}

func (m *Device_Ordinal) Reset()                    { *m = Device_Ordinal{} }
func (m *Device_Ordinal) String() string            { return proto.CompactTextString(m) }
func (*Device_Ordinal) ProtoMessage()               {}
func (*Device_Ordinal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

func (m *Device_Ordinal) GetGroup() int32 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *Device_Ordinal) GetController() int32 {
	if m != nil {
		return m.Controller
	}
	return 0
}

func init() {
	proto.RegisterType((*Metadata)(nil), "streamfile.Metadata")
	proto.RegisterType((*Metadata_EventFile)(nil), "streamfile.Metadata.EventFile")
	proto.RegisterType((*Device)(nil), "streamfile.Device")
	proto.RegisterType((*Device_Strip)(nil), "streamfile.Device.Strip")
	proto.RegisterType((*Device_Ordinal)(nil), "streamfile.Device.Ordinal")
	proto.RegisterEnum("streamfile.Compression", Compression_name, Compression_value)
	proto.RegisterEnum("streamfile.Metadata_Version", Metadata_Version_name, Metadata_Version_value)
	proto.RegisterEnum("streamfile.Device_Strip_PixelType", Device_Strip_PixelType_name, Device_Strip_PixelType_value)
}

func init() { proto.RegisterFile("streamfile.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 620 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x6d, 0x6b, 0xd4, 0x40,
	0x10, 0x6e, 0x2e, 0x97, 0xcb, 0x65, 0x8e, 0x9e, 0x61, 0x11, 0x8c, 0xa7, 0xb6, 0xe1, 0x40, 0x08,
	0xa2, 0x11, 0xeb, 0x0b, 0xf8, 0x49, 0x5a, 0xfb, 0x42, 0x91, 0xde, 0x1d, 0xdb, 0xda, 0xa2, 0x5f,
	0x42, 0x7a, 0xd9, 0x3b, 0x16, 0x2f, 0xbb, 0xcb, 0x66, 0xaf, 0xd8, 0x3f, 0xea, 0x2f, 0xf1, 0xab,
	0x20, 0xd9, 0xbd, 0xe4, 0x52, 0xab, 0x22, 0x7e, 0x9b, 0x79, 0xe6, 0x99, 0x97, 0x7d, 0x66, 0x16,
	0xfc, 0x42, 0x49, 0x92, 0xe6, 0x33, 0xba, 0x20, 0xb1, 0x90, 0x5c, 0x71, 0x04, 0x6b, 0x64, 0xb0,
	0x25, 0xd4, 0xb5, 0x20, 0xc5, 0xf3, 0x6c, 0x29, 0x53, 0x45, 0x39, 0xab, 0x0d, 0xc3, 0x1d, 0x84,
	0xab, 0xb8, 0xa2, 0x39, 0x29, 0x54, 0x9a, 0x8b, 0xb5, 0x65, 0x18, 0xc3, 0x1f, 0x0e, 0x74, 0x4f,
	0x88, 0x4a, 0xb3, 0x54, 0xa5, 0xe8, 0x0d, 0xb8, 0x57, 0x44, 0x16, 0x94, 0xb3, 0xc0, 0x0a, 0xad,
	0xa8, 0xbf, 0xf3, 0x30, 0x6e, 0xb4, 0xaf, 0x68, 0xf1, 0xb9, 0xe1, 0xe0, 0x8a, 0x8c, 0xee, 0x82,
	0x93, 0x53, 0xc6, 0x65, 0xd0, 0x0b, 0xad, 0x68, 0x13, 0x1b, 0x07, 0x21, 0x68, 0xb3, 0x34, 0x27,
	0x41, 0x2b, 0xb4, 0x22, 0x0f, 0x6b, 0x1b, 0x3d, 0x02, 0x20, 0x57, 0x84, 0xa9, 0xa4, 0xac, 0x18,
	0xd8, 0xa1, 0x1d, 0x79, 0xd8, 0xd3, 0xc8, 0x21, 0x5d, 0x10, 0x74, 0x08, 0x77, 0xd6, 0xe1, 0x84,
	0xb2, 0x19, 0x0f, 0x20, 0xb4, 0xa3, 0xde, 0xce, 0xd6, 0x6f, 0x07, 0x39, 0xa8, 0x12, 0xf1, 0x66,
	0x5d, 0xe3, 0x98, 0xcd, 0x38, 0x7a, 0x05, 0xee, 0x54, 0x92, 0x54, 0x91, 0x2c, 0x68, 0x87, 0x56,
	0xd4, 0xdb, 0x19, 0xc4, 0x73, 0xce, 0xe7, 0x95, 0x86, 0x97, 0xcb, 0x59, 0x7c, 0x56, 0x09, 0x81,
	0x2b, 0x2a, 0x7a, 0x0d, 0xdd, 0x4a, 0xbf, 0xc0, 0xd1, 0x69, 0xf7, 0x6f, 0xa5, 0xed, 0xaf, 0x08,
	0xb8, 0xa6, 0x96, 0x6f, 0x62, 0xcb, 0x3c, 0xd1, 0x13, 0x14, 0x41, 0x27, 0xb4, 0x22, 0x1b, 0x7b,
	0x6c, 0x99, 0xeb, 0xe9, 0x0a, 0xf4, 0x00, 0x4a, 0x27, 0xb9, 0xbc, 0x56, 0xa4, 0x08, 0x5c, 0x1d,
	0xed, 0xb2, 0x65, 0xbe, 0x57, 0xfa, 0xe8, 0x29, 0xb8, 0x19, 0xb9, 0xa2, 0x53, 0x52, 0x04, 0x5d,
	0xfd, 0x50, 0xd4, 0x7c, 0xe8, 0xbe, 0x0e, 0xe1, 0x8a, 0x82, 0xde, 0x42, 0x6f, 0xca, 0x73, 0x21,
	0x49, 0xa1, 0x77, 0xe4, 0xe9, 0x1d, 0xdd, 0x6b, 0x66, 0xbc, 0x5f, 0x87, 0x71, 0x93, 0x3b, 0xf8,
	0x6e, 0x81, 0x57, 0xcb, 0x55, 0xaf, 0xc6, 0x6a, 0xac, 0xe6, 0x97, 0xe2, 0xad, 0x7f, 0x2f, 0x8e,
	0x1e, 0x43, 0xdf, 0x8c, 0x98, 0xe4, 0xa9, 0x10, 0x94, 0xcd, 0xf5, 0x66, 0x6d, 0xbc, 0x69, 0xd0,
	0x13, 0x03, 0xde, 0xd0, 0xb7, 0xfd, 0xbf, 0xfa, 0x3a, 0x7f, 0xd5, 0xb7, 0x73, 0x53, 0xdf, 0xe1,
	0x36, 0xb8, 0xab, 0x6b, 0x45, 0x3d, 0x70, 0x3f, 0x8e, 0x3e, 0x8c, 0xc6, 0x17, 0x23, 0x7f, 0x03,
	0xb9, 0x60, 0x9f, 0x27, 0x2f, 0x7c, 0x6b, 0xf8, 0xad, 0x05, 0x1d, 0x23, 0x33, 0xea, 0x43, 0x8b,
	0x66, 0x2b, 0x49, 0x5a, 0x34, 0x43, 0x11, 0xf8, 0x82, 0x7e, 0x25, 0x8b, 0x22, 0x11, 0x44, 0x26,
	0x85, 0x92, 0x54, 0x68, 0x55, 0x6c, 0xdc, 0x37, 0xf8, 0x84, 0xc8, 0xd3, 0x12, 0x45, 0x31, 0x38,
	0x26, 0x6c, 0xeb, 0x1d, 0x06, 0xb7, 0x77, 0x18, 0x6b, 0x22, 0x36, 0xb4, 0xf2, 0x3c, 0xb9, 0xcc,
	0x28, 0x4b, 0x17, 0xf5, 0x79, 0xde, 0xce, 0x18, 0x1b, 0x06, 0xae, 0xa8, 0x83, 0x2f, 0xe0, 0x98,
	0x76, 0xbb, 0x00, 0x7a, 0x80, 0xa4, 0xfc, 0xdc, 0xab, 0x9f, 0x3a, 0xfc, 0x53, 0xcf, 0x78, 0x52,
	0x52, 0xcf, 0xae, 0x05, 0xc1, 0x9e, 0xa8, 0xcc, 0xe1, 0x36, 0x78, 0x35, 0x5e, 0x8a, 0x81, 0x8f,
	0xf6, 0xfc, 0x0d, 0xe4, 0x81, 0x83, 0x8f, 0xf6, 0xc6, 0x17, 0xbe, 0x35, 0x78, 0x07, 0xee, 0x6a,
	0x80, 0xf2, 0x77, 0xcf, 0x25, 0x5f, 0x0a, 0xdd, 0xc9, 0xc1, 0xc6, 0x41, 0x5b, 0x00, 0x53, 0xce,
	0x94, 0xe4, 0x8b, 0x05, 0x91, 0x5a, 0x17, 0x07, 0x37, 0x90, 0x27, 0xcf, 0xa0, 0xd7, 0xb8, 0x17,
	0x04, 0xd0, 0x39, 0x1d, 0xed, 0x4e, 0x26, 0x9f, 0xfc, 0x0d, 0xd4, 0x85, 0xf6, 0x68, 0x3c, 0x3a,
	0xf0, 0xad, 0xd2, 0x3a, 0xfa, 0x7c, 0x3c, 0xf1, 0x5b, 0x97, 0x1d, 0x7d, 0x01, 0x2f, 0x7f, 0x06,
	0x00, 0x00, 0xff, 0xff, 0x42, 0xfa, 0x50, 0x06, 0xf0, 0x04, 0x00, 0x00,
}
